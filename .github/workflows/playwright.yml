name: Nightly Playwright Tests
on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
        description: The branch to run the tests on
    secrets: 
       SLACK_WEBHOOK:
         required: true
       SUPABASE_URL:
         required: true
       SUPABASE_ANON_KEY:
         required: true
       OPENAI_API_KEY:
         required: true
jobs:
  e2e-nightly-test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: develop # The github environment to use
    env: 
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        E2E_TEST_BASE_URL: ${{ vars.E2E_TEST_BASE_URL }}
        NODE_ENV: ${{ vars.NODE_ENV }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm install -g pnpm && pnpm install
    - name: Install Playwright Browsers
      working-directory: ./frontend
      run: pnpm exec playwright install --with-deps
    - name: Print environment variables (for debugging)
      run: |
        echo "E2E_TEST_BASE_URL is $E2E_TEST_BASE_URL"
        echo "SUPABASE_URL is $SUPABASE_URL"
    - name: Start Next.js app
      run: |
        pnpm run build && pnpm start & # Run build and start Next.js app in the background if build succeeds
        NEXTJS_PID=$!  # Capture the PID of the Next.js process
        echo "Started Next.js with PID $NEXTJS_PID"
        echo "NEXTJS_PID=$NEXTJS_PID" >> $GITHUB_ENV  # Store the PID for later use
        echo "Waiting for Next.js app to start..."
        until curl -s --head --request GET http://localhost:3000 | grep "200 OK"; do
          echo "Waiting for Next.js to be available..."
          sleep 5
        done
        echo "Next.js app is up and running!"
    - name: Run Playwright tests
      working-directory: ./frontend
      run: pnpm exec playwright test e2e
    - name: Convert JUnit output to CTRF
      working-directory: ./frontend
      run: pnpm exec junit-to-ctrf playwright-report/results.xml -o playwright-report/results.json
      if: always()
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: frontend/playwright-report/      
    - name: Publish Test Report Summary
      uses: ctrf-io/github-test-reporter@v1
      with:
        report-path: 'frontend/playwright-report/*.json'
      if: always()
    - name: Clean up
      run: |
        if [ -n "$NEXTJS_PID" ]; then
          kill $NEXTJS_PID
          echo "Killed Next.js process with PID $NEXTJS_PID"
        else
          echo "No Next.js process found."
        fi      
  slack-notifier:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    permissions:
      actions: read
      contents: read
    needs: e2e-nightly-test
    steps:
      - name: Get failure info
        id: failure-info
        run: |
          delimiter=$(openssl rand -hex 8)
          {
            echo "ERRORS_OUTPUT<<$delimiter"
            curl -v -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/actions/jobs/${{ needs.e2e-nightly-test.outputs.job-id }}/logs \
              | (grep 'Error:' || echo "No errors found") | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g"
            echo -e "\n$delimiter\n"
          } | tee -a "$GITHUB_OUTPUT"
      - name: Post message in a channel
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Nightly e2e dev test result*: ${{ needs.e2e-nightly-test.result}}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Nightly e2e dev test result*: ${{ needs.e2e-nightly-test.result == 'failure' && '❌ *FAILURE*' || '✓ Success' }} \n
                    See the report <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|here> 
                    ${{ needs.e2e-nightly-test.result == 'failure' && '<!channel>' || '' }}\n
                    ${{ steps.failure-info.outputs.ERRORS_OUTPUT }}"
 